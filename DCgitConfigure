# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#
# Copyright 2019 Grant Braught

echo "Configuring DCgit..."
# Load the library functions...
SCRIPT_DIR=$(dirname $0)
. $SCRIPT_DIR/DCgitLib.bash

echo ""
VALID_USERNAME=false
while ! $VALID_USERNAME
do
  echo -n "Student GitHub Username: "
  read ENTERED_STUDENT_GITHUB_ID
  VALID_USERNAME=$(checkIfUserExistsOnGitHub $ENTERED_STUDENT_GITHUB_ID)
  if ! $VALID_USERNAME ; then
    echo "  "$ENTERED_STUDENT_GITHUB_ID" is not a valid GitHub username."
    echo "   Check the name and try again."
  fi
done
SED_CMD='s/STUDENT_GITHUB_ID=".*"/STUDENT_GITHUB_ID="'$ENTERED_STUDENT_GITHUB_ID'"/g'
git config --global user.name $ENTERED_STUDENT_GITHUB_ID
sed -i.bak $SED_CMD .DCgitConfig.bash

echo ""
echo -n "Student E-mail address: "
read ENTERED_STUDENT_EMAIL
SED_CMD='s/STUDENT_EMAIL=".*"/STUDENT_EMAIL="'$ENTERED_STUDENT_EMAIL'"/g'
git config --global user.email $ENTERED_STUDENT_EMAIL
sed -i.bak $SED_CMD .DCgitConfig.bash

echo ""
VALID_USERNAME=false
while ! $VALID_USERNAME
do
  echo -n "Instructor GitHub Username: "
  read ENTERED_INSTRUCTOR_GITHUB_ID
  VALID_USERNAME=$(checkIfUserExistsOnGitHub $ENTERED_INSTRUCTOR_GITHUB_ID)
  if ! $VALID_USERNAME ; then
    echo "  "$ENTERED_INSTRUCTOR_GITHUB_ID" is not a valid GitHub username."
    echo "   Check the name and try again."
  fi
done
SED_CMD='s/INSTRUCTOR_GITHUB_ID=".*"/INSTRUCTOR_GITHUB_ID="'$ENTERED_INSTRUCTOR_GITHUB_ID'"/g'
sed -i.bak $SED_CMD .DCgitConfig.bash

# If there is no credential helper configured use the cache
GIT_CREDENTIAL_HELPER=$(git config --global credential.helper)
if [[ $GIT_CREDENTIAL_HELPER == "" ]] ; then
  git config --global credential.helper 'cache --timeout=43200' # 12 hours
fi

# Do the basic git configuration...
git config --global push.default simple

# Do the merge tool configuration...
echo ""
echo -n "Configure a merge tool for git [y/n]: "
read CONFIG_MERGE
if [[ $CONFIG_MERGE == "y" ]] ; then
  echo ""
  echo -n "Name of the merge tool (use git mergetool --tool-help to see supported tools): "
  read MERGE_TOOL_NAME
  git config --global merge.tool $MERGE_TOOL_NAME

  echo ""
  echo -n "Execution path to "$MERGE_TOOL_NAME" (can be empty if "$MERGE_TOOL_NAME" is on PATH): "
  read MERGE_TOOL_PATH
  git config --global "mergetool."$MERGE_TOOL_NAME".path" $MERGE_TOOL_PATH
  git config --global "mergetool."$MERGE_TOOL_NAME".trustExitCode" true
  git config --global mergetool.keepBackup false
fi

SED_CMD='s/CONFIGURED=.*/CONFIGURED=true/g'
sed -i.bak $SED_CMD .DCgitConfig.bash

rm .DCgitConfig.bash.bak

echo "Done."
